package chinese

import (
	"fmt"
	"math"
	"math/big"
	"testing"
)

func TestDigitalConvert(t *testing.T) {
	var tests = []struct {
		input interface{}
		want  string // expected error from Parse/Check or result from Eval
	}{
		{1001, "壹仟零壹"},
		{0, "零"},
		{0.12312738, "零点壹贰叁壹贰柒叁捌"},
		{false, "数位已超过最大值"},
		{map[string]string{}, "数位已超过最大值"},
		{[]string{}, "数位已超过最大值"},
		{nil, "数位已超过最大值"},
		{math.Pi, "叁点壹肆壹伍玖贰陆伍叁伍捌玖捌"},
		{struct{}{}, "数位已超过最大值"},
		{big.NewInt(123127312638), "壹仟贰佰叁拾壹亿贰仟柒佰叁拾壹万贰仟陆佰叁拾捌"},
		{big.NewFloat(123127312638.123123), "数位已超过最大值"},
		{"qweqweqwe", "数位已超过最大值"},
		{"99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "数位已超过最大值"},
		{float64(99999999999999.1), "玖拾玖兆玖仟玖佰玖拾玖亿玖仟玖佰玖拾玖万玖仟玖佰玖拾玖点零玖叁柒伍"},
		{float32(99999999999999.1), "壹佰兆零叁拾柒万陆仟捌佰叁拾贰"},
		{"99999999999999.1", "玖拾玖兆玖仟玖佰玖拾玖亿玖仟玖佰玖拾玖万玖仟玖佰玖拾玖点壹"},
		{"9999999999999999999999.112312312312312", "玖拾玖垓玖仟玖佰玖拾玖京玖仟玖佰玖拾玖兆玖仟玖佰玖拾玖亿玖仟玖佰玖拾玖万玖仟玖佰玖拾玖点壹壹贰叁壹贰叁壹贰叁壹贰叁壹贰"},
	}

	for _, v := range tests {
		out := DigitalConvert(v.input)
		fmt.Println(out)
		if out != v.want {
			t.Fail()
		}
	}
}

func TestDigitalPrice(t *testing.T) {
	var tests = []struct {
		input interface{}
		want  string // expected error from Parse/Check or result from Eval
	}{
		{0, "零元整"},
		{0.12312738, "壹角贰分叁厘壹毫贰丝柒忽叁微捌纤"},
		{false, "数位已超过最大值"},
		{map[string]string{}, "数位已超过最大值"},
		{[]string{}, "数位已超过最大值"},
		{nil, "数位已超过最大值"},
		{struct{}{}, "数位已超过最大值"},
		{big.NewInt(123127312638), "壹仟贰佰叁拾壹亿贰仟柒佰叁拾壹万贰仟陆佰叁拾捌元整"},
		{big.NewFloat(123127312638.123123), "数位已超过最大值"},
		{"qweqweqwe", "数位已超过最大值"},
		{"99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "数位已超过最大值"},
		{float64(99999999999999.1), "玖拾玖兆玖仟玖佰玖拾玖亿玖仟玖佰玖拾玖万玖仟玖佰玖拾玖元零玖分叁厘柒毫伍丝"},
		{float32(99999999999999.1), "壹佰兆零叁拾柒万陆仟捌佰叁拾贰元"},
		{"99999999999999.1", "玖拾玖兆玖仟玖佰玖拾玖亿玖仟玖佰玖拾玖万玖仟玖佰玖拾玖元壹角"},
		{"9999999999999999999999.112312312312312", "玖拾玖垓玖仟玖佰玖拾玖京玖仟玖佰玖拾玖兆玖仟玖佰玖拾玖亿玖仟玖佰玖拾玖万玖仟玖佰玖拾玖元壹角壹分贰厘叁毫壹丝贰忽叁微壹纤贰沙叁尘壹埃贰渺叁漠壹贰"},
	}

	for _, v := range tests {
		out := DigitalPrice(v.input)
		if out != v.want {
			t.Fail()
		}
	}
}
